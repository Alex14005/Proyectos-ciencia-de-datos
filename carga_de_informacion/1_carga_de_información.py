# -*- coding: utf-8 -*-
"""1. CARGA DE INFORMACIÓN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Obm0-8FMrZtLfqCk2-WMWwc5Jm6o7Swc
"""

import pandas as pd

# NOTA: Se agrega el dataset con al menos dos variables en el área de horas

# La variable con los datos
ruta_archivo = '/content/OFEI1204.txt'

# Listas para almacenar los datos
agentes = []
plantas = []
horas_d = []

# Abrir el archivo de texto y leer línea por línea
with open(ruta_archivo, 'r') as archivo:
    lines = archivo.readlines()

# Variables para almacenar temporalmente el Agente y la Planta
agente_actual = ""

# Procesar cada línea del archivo
for line in lines:
    # Eliminar espacios en blanco y saltos de línea
    line = line.strip()

    # Si la línea comienza con "AGENTE:", establecer el Agente actual
    if line.startswith("AGENTE:"):
        agente_actual = line.split(":", 1)[1].strip()
    else:
        # Si la línea no está vacía, es una fila de datos para una planta
        if line:
            # Dividir los datos por comas y eliminar los espacios en blanco
            datos = [dato.strip() for dato in line.split(',')]

            # Verificar si hay al menos dos elementos (nombre de planta y tipo)
            if len(datos) >= 2:
                planta = datos[0]
                tipo = datos[1]

                # Verificar si el tipo es "D" antes de procesar los datos de las horas
                if tipo == "D":
                    horas_planta = [float(dato) for dato in datos[2:]]

                    # Agregar el Agente y la Planta a las listas solo si es de tipo "D"
                    agentes.append(agente_actual)
                    plantas.append(planta)

                    # Agregar las horas del 1 al 24 a la lista de horas solo si es de tipo "D"
                    horas_d.append(horas_planta)

# Crear el DataFrame solo con los datos de tipo "D"
data = {"Agente": agentes, "Planta": plantas}
for i in range(24):
    data[f"Hora{i+1}"] = [horas_planta[i] if i < len(horas_planta) else None for horas_planta in horas_d]

dataframe = pd.DataFrame(data)

# Mostrar el DataFrame para verificar los datos
print(dataframe)

print(dataframe.head(20))
print('='*64)
print(dataframe.tail(3))

# Verificar si hay valores nulos en el DataFrame
dataframe.isnull().sum()

# Obtener información del DataFrame
dataframe.info()

# Guardar el DataFrame en archivos CSV y Excel
df = pd.DataFrame(dataframe)
df.to_csv('Prueba1.csv', index=False)
df.to_excel('Prueba-1.xlsx', index=False)